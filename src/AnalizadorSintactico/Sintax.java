
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 03 17:29:27 ECT 2022
//----------------------------------------------------

package AnalizadorSintactico;

import java_cup.runtime.Symbol;
import Sintactico.Utilidades;
import java.util.ArrayList;
import java.util.List;
import Sintactico.Variable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 03 17:29:27 ECT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\007\003\000\002\007\003\000\002\010" +
    "\013\000\002\013\013\000\002\013\015\000\002\013\015" +
    "\000\002\013\017\000\002\014\013\000\002\014\015\000" +
    "\002\014\017\000\002\014\015\000\002\011\013\000\002" +
    "\020\013\000\002\020\015\000\002\020\015\000\002\020" +
    "\017\000\002\021\013\000\002\021\015\000\002\021\017" +
    "\000\002\021\015\000\002\005\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\020\007\015\023\020\024\010\025\007\026" +
    "\017\027\016\030\014\001\002\000\022\002\uffff\007\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\001" +
    "\002\000\004\021\ufff4\001\002\000\004\002\274\001\002" +
    "\000\004\004\271\001\002\000\004\004\266\001\002\000" +
    "\022\002\001\007\015\023\020\024\010\025\007\026\017" +
    "\027\016\030\014\001\002\000\004\021\256\001\002\000" +
    "\004\021\ufff3\001\002\000\004\004\252\001\002\000\006" +
    "\004\032\011\033\001\002\000\004\004\027\001\002\000" +
    "\004\004\024\001\002\000\004\004\021\001\002\000\004" +
    "\017\022\001\002\000\004\015\023\001\002\000\022\002" +
    "\ufffa\007\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\001\002\000\004\017\025\001\002\000\004\015" +
    "\026\001\002\000\022\002\ufff8\007\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\001\002\000\004\017" +
    "\030\001\002\000\004\015\031\001\002\000\022\002\ufff7" +
    "\007\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\001\002\000\004\017\250\001\002\000\004\004\034" +
    "\001\002\000\010\005\040\017\041\024\037\001\002\000" +
    "\004\015\205\001\002\000\004\015\142\001\002\000\004" +
    "\012\123\001\002\000\006\017\062\024\061\001\002\000" +
    "\004\012\042\001\002\000\004\017\043\001\002\000\004" +
    "\013\044\001\002\000\006\005\045\017\046\001\002\000" +
    "\004\017\053\001\002\000\004\012\047\001\002\000\004" +
    "\017\050\001\002\000\004\012\051\001\002\000\004\017" +
    "\052\001\002\000\004\015\ufff1\001\002\000\004\012\054" +
    "\001\002\000\004\017\055\001\002\000\004\012\056\001" +
    "\002\000\004\017\057\001\002\000\004\006\060\001\002" +
    "\000\004\015\ufff0\001\002\000\004\012\103\001\002\000" +
    "\004\012\063\001\002\000\004\017\064\001\002\000\004" +
    "\006\065\001\002\000\004\013\066\001\002\000\006\005" +
    "\067\017\070\001\002\000\004\017\075\001\002\000\004" +
    "\012\071\001\002\000\004\017\072\001\002\000\004\012" +
    "\073\001\002\000\004\017\074\001\002\000\004\015\uffef" +
    "\001\002\000\004\012\076\001\002\000\004\017\077\001" +
    "\002\000\004\012\100\001\002\000\004\017\101\001\002" +
    "\000\004\006\102\001\002\000\004\015\uffee\001\002\000" +
    "\004\027\104\001\002\000\004\006\105\001\002\000\004" +
    "\013\106\001\002\000\006\005\107\025\110\001\002\000" +
    "\004\025\115\001\002\000\004\012\111\001\002\000\004" +
    "\027\112\001\002\000\004\012\113\001\002\000\004\030" +
    "\114\001\002\000\004\015\uffe6\001\002\000\004\012\116" +
    "\001\002\000\004\027\117\001\002\000\004\012\120\001" +
    "\002\000\004\030\121\001\002\000\004\006\122\001\002" +
    "\000\004\015\uffe5\001\002\000\004\027\124\001\002\000" +
    "\004\013\125\001\002\000\006\005\126\025\127\001\002" +
    "\000\004\025\134\001\002\000\004\012\130\001\002\000" +
    "\004\027\131\001\002\000\004\012\132\001\002\000\004" +
    "\030\133\001\002\000\004\015\uffe8\001\002\000\004\012" +
    "\135\001\002\000\004\027\136\001\002\000\004\012\137" +
    "\001\002\000\004\030\140\001\002\000\004\006\141\001" +
    "\002\000\004\015\uffe7\001\002\000\004\010\143\001\002" +
    "\000\004\004\144\001\002\000\006\005\146\017\147\001" +
    "\002\000\004\015\204\001\002\000\004\017\165\001\002" +
    "\000\004\012\150\001\002\000\004\017\151\001\002\000" +
    "\004\012\152\001\002\000\004\017\153\001\002\000\004" +
    "\013\154\001\002\000\006\005\155\017\156\001\002\000" +
    "\004\017\161\001\002\000\004\012\157\001\002\000\004" +
    "\017\160\001\002\000\004\015\uffed\001\002\000\004\012" +
    "\162\001\002\000\004\017\163\001\002\000\004\006\164" +
    "\001\002\000\004\015\uffea\001\002\000\004\012\166\001" +
    "\002\000\004\017\167\001\002\000\004\012\170\001\002" +
    "\000\004\017\171\001\002\000\004\006\172\001\002\000" +
    "\004\013\173\001\002\000\006\005\174\017\175\001\002" +
    "\000\004\017\200\001\002\000\004\012\176\001\002\000" +
    "\004\017\177\001\002\000\004\015\uffec\001\002\000\004" +
    "\012\201\001\002\000\004\017\202\001\002\000\004\006" +
    "\203\001\002\000\004\015\uffeb\001\002\000\004\021\ufff2" +
    "\001\002\000\004\010\206\001\002\000\004\004\207\001" +
    "\002\000\006\005\212\026\211\001\002\000\004\015\247" +
    "\001\002\000\004\012\232\001\002\000\004\026\213\001" +
    "\002\000\004\012\214\001\002\000\004\027\215\001\002" +
    "\000\004\012\216\001\002\000\004\030\217\001\002\000" +
    "\004\006\220\001\002\000\004\013\221\001\002\000\006" +
    "\005\223\023\222\001\002\000\004\012\230\001\002\000" +
    "\004\023\224\001\002\000\004\012\225\001\002\000\004" +
    "\030\226\001\002\000\004\006\227\001\002\000\004\015" +
    "\uffe2\001\002\000\004\030\231\001\002\000\004\015\uffe3" +
    "\001\002\000\004\027\233\001\002\000\004\012\234\001" +
    "\002\000\004\030\235\001\002\000\004\013\236\001\002" +
    "\000\006\005\240\023\237\001\002\000\004\012\245\001" +
    "\002\000\004\023\241\001\002\000\004\012\242\001\002" +
    "\000\004\030\243\001\002\000\004\006\244\001\002\000" +
    "\004\015\uffe1\001\002\000\004\030\246\001\002\000\004" +
    "\015\uffe4\001\002\000\004\021\uffe9\001\002\000\004\015" +
    "\251\001\002\000\022\002\ufff5\007\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\001\002\000\004\017" +
    "\253\001\002\000\004\015\254\001\002\000\022\002\ufff6" +
    "\007\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\001\002\000\022\002\ufffe\007\ufffe\023\ufffe\024\ufffe" +
    "\025\ufffe\026\ufffe\027\ufffe\030\ufffe\001\002\000\004\011" +
    "\257\001\002\000\004\014\260\001\002\000\004\010\261" +
    "\001\002\000\004\015\262\001\002\000\022\002\uffe0\007" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\001\002\000\022\002\ufffd\007\ufffd\023\ufffd\024\ufffd\025" +
    "\ufffd\026\ufffd\027\ufffd\030\ufffd\001\002\000\004\021\256" +
    "\001\002\000\022\002\ufffc\007\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\001\002\000\004\017\267" +
    "\001\002\000\004\015\270\001\002\000\022\002\ufffb\007" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\001\002\000\004\017\272\001\002\000\004\015\273\001" +
    "\002\000\022\002\ufff9\007\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\016\002\005\003\010\004\003\007\011\010" +
    "\004\011\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\262\007\263\010\004\011\012\001\001\000\004" +
    "\005\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\035\020\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    public Integer tiempo;
    public String palabras;
    public  List<Double> variables =  new ArrayList<>();
    public  List<String> variablesNombre =  new ArrayList<>();

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RESULTADO ::= P_RESERVADA PRESAS CONCATENADOR DEPREDADORES P_COMA 
            {
              Object RESULT =null;
		int presaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int presaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object presa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int depredadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int depredadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object depredador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
Utilidades.imprimirLotkaVolterra(presa.toString(), depredador.toString());
variablesNombre.clear();

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESULTADO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACIOND_VARIABLE ::= ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR RESTA PARENTESIS_A TCD MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                if(Utilidades.verificar(valor_1.toString()) | Utilidades.verificar(valor_2.toString())){
variablesNombre.add(valor_1.toString());
variablesNombre.add(valor_2.toString());

}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACIOND_VARIABLE ::= PARENTESIS_A ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C RESTA PARENTESIS_A TCD MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                if(Utilidades.verificar(valor_1.toString()) | Utilidades.verificar(valor_2.toString())){
variablesNombre.add(valor_1.toString());
variablesNombre.add(valor_2.toString());

}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIOND_VARIABLE ::= PARENTESIS_A ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C RESTA TCD MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                if(Utilidades.verificar(valor_1.toString()) | Utilidades.verificar(valor_2.toString())){
variablesNombre.add(valor_1.toString());
variablesNombre.add(valor_2.toString());

}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIOND_VARIABLE ::= ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR RESTA TCD MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		

if(Utilidades.verificar(valor_1.toString()) | Utilidades.verificar(valor_2.toString())){
variablesNombre.add(valor_1.toString());
variablesNombre.add(valor_2.toString());

}


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACIONP_VARIABLE ::= PARENTESIS_A TCP MULTIPLICACION PRESA PARENTESIS_C RESTA PARENTESIS_A ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                if(Utilidades.verificar(valor_a.toString()) | Utilidades.verificar(valor_b.toString())  | Utilidades.verificar(valor_c.toString())  | Utilidades.verificar(valor_d.toString())){

variablesNombre.add(valor_a.toString());
variablesNombre.add(valor_b.toString());
variablesNombre.add(valor_c.toString());
variablesNombre.add(valor_d.toString());
}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACIONP_VARIABLE ::= PARENTESIS_A TCP MULTIPLICACION PRESA PARENTESIS_C RESTA ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                if(Utilidades.verificar(valor_a.toString()) | Utilidades.verificar(valor_b.toString())  | Utilidades.verificar(valor_c.toString())  | Utilidades.verificar(valor_d.toString())){

variablesNombre.add(valor_a.toString());
variablesNombre.add(valor_b.toString());
variablesNombre.add(valor_c.toString());
variablesNombre.add(valor_d.toString());
}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACIONP_VARIABLE ::= TCP MULTIPLICACION PRESA RESTA PARENTESIS_A ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                if(Utilidades.verificar(valor_a.toString()) | Utilidades.verificar(valor_b.toString())  | Utilidades.verificar(valor_c.toString())  | Utilidades.verificar(valor_d.toString())){

variablesNombre.add(valor_a.toString());
variablesNombre.add(valor_b.toString());
variablesNombre.add(valor_c.toString());
variablesNombre.add(valor_d.toString());
}
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACIONP_VARIABLE ::= TCP MULTIPLICACION PRESA RESTA ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

if(Utilidades.verificar(valor_a.toString()) | Utilidades.verificar(valor_b.toString())  | Utilidades.verificar(valor_c.toString())  | Utilidades.verificar(valor_d.toString())){

variablesNombre.add(valor_a.toString());
variablesNombre.add(valor_b.toString());
variablesNombre.add(valor_c.toString());
variablesNombre.add(valor_d.toString());
}


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DESARROLLO_VARIABLE ::= TIEMPO PRESAS ASIGNACION OPERACIONP_VARIABLE P_COMA DEPREDADORES ASIGNACION OPERACIOND_VARIABLE P_COMA 
            {
              Object RESULT =null;
		int valor_tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		
 if(Utilidades.verificar(valor_t.toString())){
Utilidades.operarVariables(variablesNombre, valor_t.toString());

}



              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO_VARIABLE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIOND_DIGITO ::= DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int valor_3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object valor_3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valor_4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                variables.add(Double.parseDouble(valor_1.toString()));
                variables.add(Double.parseDouble(valor_2.toString()));
                variables.add(Double.parseDouble(valor_3.toString()));
                variables.add(Double.parseDouble(valor_4.toString()));
                variables.add(Double.parseDouble(valor_5.toString()));
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERACIOND_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int valor_3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object valor_3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int valor_4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                variables.add(Double.parseDouble(valor_1.toString()));
                variables.add(Double.parseDouble(valor_2.toString()));
                variables.add(Double.parseDouble(valor_3.toString()));
                variables.add(Double.parseDouble(valor_4.toString()));
                variables.add(Double.parseDouble(valor_5.toString()));
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERACIOND_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int valor_3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valor_4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valor_4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valor_5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valor_5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor_5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                variables.add(Double.parseDouble(valor_1.toString()));
                variables.add(Double.parseDouble(valor_2.toString()));
                variables.add(Double.parseDouble(valor_3.toString()));
                variables.add(Double.parseDouble(valor_4.toString()));
                variables.add(Double.parseDouble(valor_5.toString()));
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACIOND_DIGITO ::= DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO RESTA DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;
		int valor_1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int valor_2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object valor_2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valor_3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valor_3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object valor_3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valor_4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valor_4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valor_4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valor_5left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valor_5right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor_5 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
variables.add(Double.parseDouble(valor_1.toString()));
variables.add(Double.parseDouble(valor_2.toString()));
variables.add(Double.parseDouble(valor_3.toString()));
variables.add(Double.parseDouble(valor_4.toString()));
variables.add(Double.parseDouble(valor_5.toString()));

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACIONP_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                variables.add(Double.parseDouble(valor_a.toString()));
                variables.add(Double.parseDouble(valor_b.toString()));
                variables.add(Double.parseDouble(valor_c.toString()));
                variables.add(Double.parseDouble(valor_d.toString()));
                variables.add(Double.parseDouble(valor_e.toString()));
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERACIONP_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valor_eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valor_eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor_e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                variables.add(Double.parseDouble(valor_a.toString()));
                variables.add(Double.parseDouble(valor_b.toString()));
                variables.add(Double.parseDouble(valor_c.toString()));
                variables.add(Double.parseDouble(valor_d.toString()));
                variables.add(Double.parseDouble(valor_e.toString()));
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACIONP_DIGITO ::= DIGITO MULTIPLICACION DIGITO RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                variables.add(Double.parseDouble(valor_a.toString()));
                variables.add(Double.parseDouble(valor_b.toString()));
                variables.add(Double.parseDouble(valor_c.toString()));
                variables.add(Double.parseDouble(valor_d.toString()));
                variables.add(Double.parseDouble(valor_e.toString()));
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACIONP_DIGITO ::= DIGITO MULTIPLICACION DIGITO RESTA DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int valor_bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object valor_b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valor_eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valor_eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object valor_e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
variables.add(Double.parseDouble(valor_a.toString()));
variables.add(Double.parseDouble(valor_b.toString()));
variables.add(Double.parseDouble(valor_c.toString()));
variables.add(Double.parseDouble(valor_d.toString()));
variables.add(Double.parseDouble(valor_e.toString()));

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DESARROLLO_DIGITO ::= TIEMPO PRESAS ASIGNACION OPERACIONP_DIGITO P_COMA DEPREDADORES ASIGNACION OPERACIOND_DIGITO P_COMA 
            {
              Object RESULT =null;
		int valor_tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		
Utilidades.OperacionLotkaVolterra(variables,valor_t.toString());

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO_DIGITO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERACIO_ECUACIONES ::= DESARROLLO_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIO_ECUACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERACIO_ECUACIONES ::= DESARROLLO_DIGITO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIO_ECUACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= TIEMPO ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object tiempo = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(tiempo.toString(), dig.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= DEPREDADOR ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= PRESA ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= ECAD ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= ECDP ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TCD ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= TCP ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA OPERACIO_ECUACIONES RESULTADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= OPERACIO_ECUACIONES RESULTADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

