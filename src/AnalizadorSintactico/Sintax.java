
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 20 14:58:53 ECT 2022
//----------------------------------------------------

package AnalizadorSintactico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 20 14:58:53 ECT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\006\006\000\002" +
    "\006\006\000\002\010\007\000\002\010\005\000\002\010" +
    "\005\000\002\010\010\000\002\010\012\000\002\010\005" +
    "\000\002\010\007\000\002\011\007\000\002\014\007\000" +
    "\002\007\005\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\006\011\007\014\011\001\002\000\010\002" +
    "\uffff\011\007\014\011\001\002\000\004\002\001\001\002" +
    "\000\010\002\ufffe\011\007\014\011\001\002\000\004\004" +
    "\102\001\002\000\004\002\101\001\002\000\004\004\012" +
    "\001\002\000\012\005\022\007\016\011\021\012\013\001" +
    "\002\000\010\006\uffea\007\uffea\010\uffea\001\002\000\004" +
    "\007\075\001\002\000\004\007\071\001\002\000\006\011" +
    "\030\012\013\001\002\000\004\010\063\001\002\000\006" +
    "\007\057\010\060\001\002\000\006\007\uffe9\010\056\001" +
    "\002\000\010\007\034\011\030\012\013\001\002\000\004" +
    "\007\024\001\002\000\004\005\026\001\002\000\004\010" +
    "\uffef\001\002\000\006\011\030\012\013\001\002\000\004" +
    "\007\031\001\002\000\010\006\uffe9\007\uffe9\010\uffe9\001" +
    "\002\000\006\011\030\012\013\001\002\000\004\006\033" +
    "\001\002\000\006\007\uffec\010\uffec\001\002\000\006\011" +
    "\030\012\013\001\002\000\004\006\043\001\002\000\004" +
    "\007\037\001\002\000\006\011\030\012\013\001\002\000" +
    "\006\006\033\007\041\001\002\000\006\011\030\012\013" +
    "\001\002\000\010\006\uffed\007\uffed\010\uffed\001\002\000" +
    "\006\007\uffeb\010\uffeb\001\002\000\004\007\045\001\002" +
    "\000\006\011\030\012\013\001\002\000\004\006\047\001" +
    "\002\000\004\007\050\001\002\000\004\005\051\001\002" +
    "\000\006\011\030\012\013\001\002\000\004\010\ufff0\001" +
    "\002\000\004\007\054\001\002\000\006\011\030\012\013" +
    "\001\002\000\004\007\041\001\002\000\010\002\ufff8\011" +
    "\ufff8\014\ufff8\001\002\000\010\005\051\011\030\012\013" +
    "\001\002\000\010\002\ufff5\011\ufff5\014\ufff5\001\002\000" +
    "\004\010\ufff3\001\002\000\004\010\ufff2\001\002\000\010" +
    "\002\ufff6\011\ufff6\014\ufff6\001\002\000\004\007\065\001" +
    "\002\000\006\011\030\012\013\001\002\000\004\007\067" +
    "\001\002\000\004\005\051\001\002\000\004\010\ufff1\001" +
    "\002\000\006\011\030\012\013\001\002\000\004\007\073" +
    "\001\002\000\006\011\030\012\013\001\002\000\004\010" +
    "\uffee\001\002\000\006\011\030\012\013\001\002\000\004" +
    "\007\077\001\002\000\010\005\051\011\030\012\013\001" +
    "\002\000\004\010\ufff4\001\002\000\004\002\000\001\002" +
    "\000\012\005\022\007\016\011\107\012\103\001\002\000" +
    "\006\007\uffea\010\113\001\002\000\006\007\071\010\112" +
    "\001\002\000\004\010\111\001\002\000\004\007\057\001" +
    "\002\000\006\007\uffe9\010\110\001\002\000\010\002\ufffa" +
    "\011\ufffa\014\ufffa\001\002\000\010\002\ufff9\011\ufff9\014" +
    "\ufff9\001\002\000\010\002\ufff7\011\ufff7\014\ufff7\001\002" +
    "\000\010\002\ufffb\011\ufffb\014\ufffb\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\012\002\007\004\004\005\003\006\005\001" +
    "\001\000\010\004\114\005\003\006\005\001\001\000\002" +
    "\001\001\000\010\004\113\005\003\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\022\010\016\011\014\012\013\014\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\034\012\035\001\001\000\002" +
    "\001\001\000\004\014\024\001\001\000\002\001\001\000" +
    "\004\012\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\037\001\001\000\002\001\001\000" +
    "\004\012\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\051\001\001\000\006" +
    "\011\034\012\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\061\011\060\012\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\065\001\001\000" +
    "\002\001\001\000\004\007\067\001\001\000\002\001\001" +
    "\000\004\012\071\001\001\000\002\001\001\000\004\012" +
    "\073\001\001\000\002\001\001\000\004\012\075\001\001" +
    "\000\002\001\001\000\006\007\077\012\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\022\010\104" +
    "\011\103\012\013\014\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= DIGITO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DESARROLLO_PARENTESIS2 ::= PARENTESIS_A OPERACION1 PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO_PARENTESIS2",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARENTESIS ::= PARENTESIS_A VALOR ARITMETICOS VALOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARENTESIS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACION1 ::= VALOR ARITMETICOS VALOR ARITMETICOS VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION1",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACION ::= OPERACION1 ARITMETICOS VALOR ARITMETICOS VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERACION ::= DESARROLLO_PARENTESIS2 ARITMETICOS PARENTESIS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACION ::= PARENTESIS_A ARITMETICOS VALOR ARITMETICOS VALOR PARENTESIS_C ARITMETICOS DESARROLLO_PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACION ::= ARITMETICOS VALOR ARITMETICOS VALOR ARITMETICOS DESARROLLO_PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERACION ::= PARENTESIS ARITMETICOS DESARROLLO_PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPERACION ::= PARENTESIS ARITMETICOS OPERACION1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPERACION ::= VALOR ARITMETICOS VALOR ARITMETICOS DESARROLLO_PARENTESIS2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DESARROLLO ::= P_RESERVADA ASIGNACION PARENTESIS P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DESARROLLO ::= P_RESERVADA ASIGNACION OPERACION P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= NOMBRE ASIGNACION OPERACION1 P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= P_RESERVADA ASIGNACION NOMBRE P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= NOMBRE ASIGNACION OPERACION P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= NOMBRE ASIGNACION NOMBRE P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= NOMBRE ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DESARROLLO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DESARROLLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

