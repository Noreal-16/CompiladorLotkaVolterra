
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Aug 28 21:42:27 ECT 2022
//----------------------------------------------------

package AnalizadorSintactico;

import java_cup.runtime.Symbol;
import Sintactico.Utilidades;
import java.util.ArrayList;
import java.util.List;
import Sintactico.Variable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Aug 28 21:42:27 ECT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\013\003\000\002\013\003" +
    "\000\002\007\012\000\002\011\013\000\002\011\015\000" +
    "\002\011\015\000\002\011\017\000\002\012\013\000\002" +
    "\012\015\000\002\012\017\000\002\012\015\000\002\006" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\022\007\015\010\005\015\016\020\007\022" +
    "\017\023\012\024\011\025\020\001\002\000\024\002\uffff" +
    "\007\015\010\005\015\016\020\007\022\017\023\012\024" +
    "\011\025\020\001\002\000\004\004\160\001\002\000\024" +
    "\002\ufffe\007\015\010\005\015\016\020\007\022\017\023" +
    "\012\024\011\025\020\001\002\000\004\010\153\001\002" +
    "\000\004\002\152\001\002\000\004\004\147\001\002\000" +
    "\004\004\144\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffd\001\002\000\004\004\141\001\002\000\004\004" +
    "\027\001\002\000\004\004\024\001\002\000\004\004\021" +
    "\001\002\000\004\016\022\001\002\000\004\014\023\001" +
    "\002\000\024\002\ufff1\007\ufff1\010\ufff1\015\ufff1\020\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\001\002\000\004\016" +
    "\025\001\002\000\004\014\026\001\002\000\024\002\ufff3" +
    "\007\ufff3\010\ufff3\015\ufff3\020\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\001\002\000\014\005\033\015\036\016\035" +
    "\023\030\025\031\001\002\000\004\011\122\001\002\000" +
    "\004\011\105\001\002\000\004\014\104\001\002\000\006" +
    "\023\042\025\043\001\002\000\004\014\041\001\002\000" +
    "\004\014\040\001\002\000\004\014\037\001\002\000\024" +
    "\002\ufff9\007\ufff9\010\ufff9\015\ufff9\020\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\001\002\000\024\002\ufffa\007\ufffa" +
    "\010\ufffa\015\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\001\002\000\024\002\ufff5\007\ufff5\010\ufff5\015\ufff5" +
    "\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002\000" +
    "\004\011\064\001\002\000\004\011\044\001\002\000\006" +
    "\015\047\016\046\001\002\000\004\011\050\001\002\000" +
    "\012\006\ufff0\011\ufff0\012\ufff0\014\ufff0\001\002\000\012" +
    "\006\uffef\011\uffef\012\uffef\014\uffef\001\002\000\006\015" +
    "\047\016\046\001\002\000\004\006\052\001\002\000\004" +
    "\012\053\001\002\000\006\005\055\022\054\001\002\000" +
    "\004\011\062\001\002\000\004\022\056\001\002\000\004" +
    "\011\057\001\002\000\006\015\047\016\046\001\002\000" +
    "\004\006\061\001\002\000\004\014\uffe7\001\002\000\006" +
    "\015\047\016\046\001\002\000\004\014\uffe8\001\002\000" +
    "\006\015\047\016\046\001\002\000\004\006\066\001\002" +
    "\000\004\012\067\001\002\000\006\005\070\024\071\001" +
    "\002\000\004\024\076\001\002\000\004\011\072\001\002" +
    "\000\006\015\047\016\046\001\002\000\004\011\074\001" +
    "\002\000\006\015\047\016\046\001\002\000\004\014\uffeb" +
    "\001\002\000\004\011\077\001\002\000\006\015\047\016" +
    "\046\001\002\000\004\011\101\001\002\000\006\015\047" +
    "\016\046\001\002\000\004\006\103\001\002\000\004\014" +
    "\uffea\001\002\000\024\002\ufff8\007\ufff8\010\ufff8\015\ufff8" +
    "\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\001\002\000" +
    "\006\015\047\016\046\001\002\000\004\011\107\001\002" +
    "\000\006\015\047\016\046\001\002\000\004\012\111\001" +
    "\002\000\006\005\113\022\112\001\002\000\004\011\120" +
    "\001\002\000\004\022\114\001\002\000\004\011\115\001" +
    "\002\000\006\015\047\016\046\001\002\000\004\006\117" +
    "\001\002\000\004\014\uffe6\001\002\000\006\015\047\016" +
    "\046\001\002\000\004\014\uffe9\001\002\000\006\015\047" +
    "\016\046\001\002\000\004\012\124\001\002\000\006\005" +
    "\125\024\126\001\002\000\004\024\133\001\002\000\004" +
    "\011\127\001\002\000\006\015\047\016\046\001\002\000" +
    "\004\012\131\001\002\000\006\015\047\016\046\001\002" +
    "\000\004\014\uffed\001\002\000\004\011\134\001\002\000" +
    "\006\015\047\016\046\001\002\000\004\011\136\001\002" +
    "\000\006\015\047\016\046\001\002\000\004\006\140\001" +
    "\002\000\004\014\uffec\001\002\000\004\015\142\001\002" +
    "\000\004\014\143\001\002\000\024\002\ufff6\007\ufff6\010" +
    "\ufff6\015\ufff6\020\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\001\002\000\004\016\145\001\002\000\004\014\146\001" +
    "\002\000\024\002\ufff4\007\ufff4\010\ufff4\015\ufff4\020\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\001\002\000\004\016" +
    "\150\001\002\000\004\014\151\001\002\000\024\002\ufff2" +
    "\007\ufff2\010\ufff2\015\ufff2\020\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\001\002\000\004\002\000\001\002\000\004" +
    "\013\154\001\002\000\004\007\155\001\002\000\004\014" +
    "\156\001\002\000\004\002\uffe5\001\002\000\004\002\ufffb" +
    "\001\002\000\010\005\162\015\163\023\030\001\002\000" +
    "\004\014\165\001\002\000\004\023\042\001\002\000\004" +
    "\014\164\001\002\000\024\002\ufff7\007\ufff7\010\ufff7\015" +
    "\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\001\002" +
    "\000\004\007\166\001\002\000\004\004\167\001\002\000" +
    "\006\005\170\025\031\001\002\000\004\025\043\001\002" +
    "\000\004\014\172\001\002\000\024\002\uffee\007\uffee\010" +
    "\uffee\015\uffee\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\014\002\007\004\012\005\003\006\013\007" +
    "\005\001\001\000\012\004\172\005\003\006\013\007\005" +
    "\001\001\000\002\001\001\000\012\004\156\005\003\006" +
    "\013\007\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\031\012\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\062\001\001\000\002" +
    "\001\001\000\004\013\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\072\001\001\000\002\001\001\000" +
    "\004\013\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\077\001\001\000\002\001\001\000\004\013" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\105\001\001\000\002\001\001\000" +
    "\004\013\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\120\001\001\000\002\001\001\000\004\013" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\127\001\001\000" +
    "\002\001\001\000\004\013\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\134\001\001\000\002\001" +
    "\001\000\004\013\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    public Double a;
    public String palabras;
    public  List<Double> variables =  new ArrayList<>();
    public  List<String> variablesNombre =  new ArrayList<>();

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RESULTADO ::= P_RESERVADA PRESAS CONCATENADOR DEPREDADORES P_COMA 
            {
              Object RESULT =null;
		int presaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int presaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object presa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int depredadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int depredadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object depredador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
System.out.println("Ingreso" + presa);
System.out.println("Ingresos" + depredador);


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESULTADO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACIOND ::= ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR RESTA PARENTESIS_A TCD MULTIPLICACION VALOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACIOND ::= PARENTESIS_A ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C RESTA PARENTESIS_A TCD MULTIPLICACION VALOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACIOND ::= PARENTESIS_A ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C RESTA TCD MULTIPLICACION VALOR 
            {
              Object RESULT =null;
		
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACIOND ::= ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR RESTA TCD MULTIPLICACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONP ::= PARENTESIS_A TCP MULTIPLICACION VALOR PARENTESIS_C RESTA PARENTESIS_A ECDP MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERACIONP ::= PARENTESIS_A TCP MULTIPLICACION VALOR PARENTESIS_C RESTA ECDP MULTIPLICACION VALOR MULTIPLICACION VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERACIONP ::= TCP MULTIPLICACION VALOR RESTA PARENTESIS_A ECDP MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_presaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_presaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_presa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_depredadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_depredadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_depredador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACIONP ::= TCP MULTIPLICACION VALOR RESTA ECDP MULTIPLICACION VALOR RESTA VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DESARROLLO ::= PRESAS ASIGNACION OPERACIONP P_COMA DEPREDADORES ASIGNACION OPERACIOND P_COMA 
            {
              Object RESULT =null;
		
Utilidades.OperacionLotkaVolterra(variables);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALOR ::= NOMBRE 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
if (!variablesNombre.contains(nombre.toString())) {
palabras = nombre.toString();
variablesNombre.add(palabras);
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= DIGITO 
            {
              Object RESULT =null;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
//if (!variables.contains(Double.parseDouble(dig.toString()))) {

a = Double.parseDouble(dig.toString());
variables.add(a);
//}else{
//System.out.println("No se puede agregar ma valores ");
//}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= ECAD ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= ECDP ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= TCD ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= TCP ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= NOMBRE ASIGNACION OPERACIOND P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), operador.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= DEPREDADORES ASIGNACION NOMBRE P_COMA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(operador.toString(), nombre.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= PRESAS ASIGNACION NOMBRE P_COMA 
            {
              Object RESULT =null;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(operador.toString(), nombre.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= NOMBRE ASIGNACION OPERACIONP P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object operador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), operador.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= NOMBRE ASIGNACION NOMBRE P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nombre_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nombre_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nombre_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), nombre_a.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= NOMBRE ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), valor.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DESARROLLO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= RESULTADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DESARROLLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

