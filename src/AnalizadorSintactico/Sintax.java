
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 01 22:01:53 ECT 2022
//----------------------------------------------------

package AnalizadorSintactico;

import java_cup.runtime.Symbol;
import Sintactico.Utilidades;
import java.util.ArrayList;
import java.util.List;
import Sintactico.Variable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 01 22:01:53 ECT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\010\012\000\002\010\012\000\002\012" +
    "\013\000\002\012\015\000\002\012\015\000\002\012\017" +
    "\000\002\013\013\000\002\013\015\000\002\013\017\000" +
    "\002\013\015\000\002\017\013\000\002\017\015\000\002" +
    "\017\015\000\002\017\017\000\002\020\013\000\002\020" +
    "\015\000\002\020\017\000\002\020\015\000\002\006\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\022\010\005\020\007\022\017\023\011\024" +
    "\010\025\020\026\016\027\015\001\002\000\024\002\uffff" +
    "\010\005\020\007\022\017\023\011\024\010\025\020\026" +
    "\016\027\015\001\002\000\004\004\051\001\002\000\004" +
    "\002\050\001\002\000\004\010\044\001\002\000\004\004" +
    "\041\001\002\000\004\004\036\001\002\000\004\002\001" +
    "\001\002\000\004\002\ufffd\001\002\000\024\002\ufffe\010" +
    "\005\020\007\022\017\023\011\024\010\025\020\026\016" +
    "\027\015\001\002\000\004\004\032\001\002\000\004\004" +
    "\027\001\002\000\004\004\024\001\002\000\004\004\021" +
    "\001\002\000\004\016\022\001\002\000\004\014\023\001" +
    "\002\000\024\002\ufff7\010\ufff7\020\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\001\002\000\004\016" +
    "\025\001\002\000\004\014\026\001\002\000\024\002\ufff9" +
    "\010\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\001\002\000\004\016\030\001\002\000\004" +
    "\014\031\001\002\000\024\002\ufff6\010\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\001\002" +
    "\000\004\016\033\001\002\000\004\014\034\001\002\000" +
    "\024\002\ufff5\010\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\001\002\000\004\002\ufffb\001" +
    "\002\000\004\016\037\001\002\000\004\014\040\001\002" +
    "\000\024\002\ufffa\010\ufffa\020\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\001\002\000\004\016\042" +
    "\001\002\000\004\014\043\001\002\000\024\002\ufff8\010" +
    "\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\001\002\000\004\013\045\001\002\000\004\007" +
    "\046\001\002\000\004\014\047\001\002\000\004\002\uffe2" +
    "\001\002\000\004\002\000\001\002\000\010\005\054\016" +
    "\056\023\053\001\002\000\004\014\161\001\002\000\004" +
    "\011\142\001\002\000\006\016\101\023\121\001\002\000" +
    "\004\014\074\001\002\000\004\011\057\001\002\000\004" +
    "\016\060\001\002\000\004\011\061\001\002\000\004\016" +
    "\062\001\002\000\004\012\063\001\002\000\006\005\064" +
    "\016\065\001\002\000\004\016\070\001\002\000\004\011" +
    "\066\001\002\000\004\016\067\001\002\000\004\014\uffee" +
    "\001\002\000\004\011\071\001\002\000\004\016\072\001" +
    "\002\000\004\006\073\001\002\000\004\014\uffeb\001\002" +
    "\000\004\007\075\001\002\000\004\004\076\001\002\000" +
    "\006\005\100\016\056\001\002\000\004\014\120\001\002" +
    "\000\004\016\101\001\002\000\004\011\102\001\002\000" +
    "\004\016\103\001\002\000\004\011\104\001\002\000\004" +
    "\016\105\001\002\000\004\006\106\001\002\000\004\012" +
    "\107\001\002\000\006\005\110\016\111\001\002\000\004" +
    "\016\114\001\002\000\004\011\112\001\002\000\004\016" +
    "\113\001\002\000\004\014\uffed\001\002\000\004\011\115" +
    "\001\002\000\004\016\116\001\002\000\004\006\117\001" +
    "\002\000\004\014\uffec\001\002\000\024\002\ufff3\010\ufff3" +
    "\020\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\001\002\000\004\011\122\001\002\000\004\026\123" +
    "\001\002\000\004\006\124\001\002\000\004\012\125\001" +
    "\002\000\006\005\126\024\127\001\002\000\004\024\134" +
    "\001\002\000\004\011\130\001\002\000\004\026\131\001" +
    "\002\000\004\011\132\001\002\000\004\027\133\001\002" +
    "\000\004\014\uffe8\001\002\000\004\011\135\001\002\000" +
    "\004\026\136\001\002\000\004\011\137\001\002\000\004" +
    "\027\140\001\002\000\004\006\141\001\002\000\004\014" +
    "\uffe7\001\002\000\004\026\143\001\002\000\004\012\144" +
    "\001\002\000\006\005\145\024\146\001\002\000\004\024" +
    "\153\001\002\000\004\011\147\001\002\000\004\026\150" +
    "\001\002\000\004\012\151\001\002\000\004\027\152\001" +
    "\002\000\004\014\uffea\001\002\000\004\011\154\001\002" +
    "\000\004\026\155\001\002\000\004\011\156\001\002\000" +
    "\004\027\157\001\002\000\004\006\160\001\002\000\004" +
    "\014\uffe9\001\002\000\004\007\162\001\002\000\004\004" +
    "\163\001\002\000\006\005\166\025\165\001\002\000\004" +
    "\014\223\001\002\000\004\011\206\001\002\000\004\025" +
    "\167\001\002\000\004\011\170\001\002\000\004\026\171" +
    "\001\002\000\004\011\172\001\002\000\004\027\173\001" +
    "\002\000\004\006\174\001\002\000\004\012\175\001\002" +
    "\000\006\005\177\023\176\001\002\000\004\011\204\001" +
    "\002\000\004\023\200\001\002\000\004\011\201\001\002" +
    "\000\004\027\202\001\002\000\004\006\203\001\002\000" +
    "\004\014\uffe4\001\002\000\004\027\205\001\002\000\004" +
    "\014\uffe5\001\002\000\004\026\207\001\002\000\004\011" +
    "\210\001\002\000\004\027\211\001\002\000\004\012\212" +
    "\001\002\000\006\005\214\023\213\001\002\000\004\011" +
    "\221\001\002\000\004\023\215\001\002\000\004\011\216" +
    "\001\002\000\004\027\217\001\002\000\004\006\220\001" +
    "\002\000\004\014\uffe3\001\002\000\004\027\222\001\002" +
    "\000\004\014\uffe6\001\002\000\024\002\ufff4\010\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\014\002\005\004\011\005\003\006\012\010" +
    "\013\001\001\000\012\004\223\005\003\006\012\010\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\034\005\003\006\012\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\054\017\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    public Double a;
    public String palabras;
    public  List<Double> variables =  new ArrayList<>();
    public  List<String> variablesNombre =  new ArrayList<>();

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RESULTADO ::= P_RESERVADA PRESAS CONCATENADOR DEPREDADORES P_COMA 
            {
              Object RESULT =null;
		int presaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int presaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object presa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int depredadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int depredadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object depredador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
System.out.println("Ingreso" + presa);
System.out.println("Ingresos" + depredador);


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RESULTADO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACIOND_VARIABLE ::= ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR RESTA PARENTESIS_A TCP MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERACIOND_VARIABLE ::= PARENTESIS_A ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C RESTA PARENTESIS_A TCP MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERACIOND_VARIABLE ::= PARENTESIS_A ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C RESTA TCP MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERACIOND_VARIABLE ::= ECAD MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR RESTA TCP MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_VARIABLE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERACIONP_VARIABLE ::= PARENTESIS_A TCP MULTIPLICACION PRESA PARENTESIS_C RESTA PARENTESIS_A ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERACIONP_VARIABLE ::= PARENTESIS_A TCP MULTIPLICACION PRESA PARENTESIS_C RESTA ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERACIONP_VARIABLE ::= TCP MULTIPLICACION PRESA RESTA PARENTESIS_A ECDP MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_presaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_presaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_presa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_depredadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_depredadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_depredador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERACIONP_VARIABLE ::= TCP MULTIPLICACION PRESA RESTA ECDP MULTIPLICACION PRESA RESTA DEPREDADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_VARIABLE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERACIOND_DIGITO ::= DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERACIOND_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACIOND_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;
		
              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERACIOND_DIGITO ::= DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO RESTA DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIOND_DIGITO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERACIONP_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERACIONP_DIGITO ::= PARENTESIS_A DIGITO MULTIPLICACION DIGITO PARENTESIS_C RESTA DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERACIONP_DIGITO ::= DIGITO MULTIPLICACION DIGITO RESTA PARENTESIS_A DIGITO MULTIPLICACION DIGITO MULTIPLICACION DIGITO PARENTESIS_C 
            {
              Object RESULT =null;
		int valor_aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int valor_aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object valor_a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int valor_presaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int valor_presaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object valor_presa = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int valor_cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int valor_cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object valor_c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int valor_dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int valor_dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object valor_d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valor_depredadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valor_depredadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object valor_depredador = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPERACIONP_DIGITO ::= DIGITO MULTIPLICACION DIGITO RESTA DIGITO MULTIPLICACION DIGITO RESTA DIGITO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONP_DIGITO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DESARROLLO_VARIABLE ::= PRESAS ASIGNACION OPERACIOND_DIGITO P_COMA DEPREDADORES ASIGNACION OPERACIOND_DIGITO P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DESARROLLO_VARIABLE ::= PRESAS ASIGNACION OPERACIONP_VARIABLE P_COMA DEPREDADORES ASIGNACION OPERACIOND_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DESARROLLO_VARIABLE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= DEPREDADOR ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACION ::= PRESA ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= ECAD ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= ECDP ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= TCD ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= TCP ASIGNACION DIGITO P_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int digleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int digright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
    Utilidades.addVarible(nombre.toString(), dig.toString());
   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DESARROLLO_VARIABLE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= RESULTADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DESARROLLO_VARIABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

