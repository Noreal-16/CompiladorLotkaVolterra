package AnalizadorSintactico;
import java_cup.runtime.Symbol;
import Sintactico.Utilidades;
import java.util.ArrayList;
import java.util.List;
import Sintactico.Variable;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }
:};
action code
{:
    public Double a;
    public String palabras;
    public  List<Double> variables =  new ArrayList<>();
    public  List<String> variablesNombre =  new ArrayList<>();
:}

terminal ASIGNACION, PARENTESIS_A, PARENTESIS_C,DEPREDADORES,PRESAS, MULTIPLICACION,RESTA, CONCATENADOR, P_COMA, NOMBRE, DIGITO, ERROR, P_RESERVADA, DERIVADA,TCD,TCP,ECDP,ECAD;
non terminal INICIO, VARIABLE, SENTENCIA, DECLARACION,RESULTADO, DESARROLLO, DESARROLLO_PARENTESIS2,OPERACIONP, OPERACIOND, VALOR,AUXOPERACION,PARENTESIS;
INICIO ::= SENTENCIA;
SENTENCIA ::= DECLARACION | DESARROLLO | RESULTADO |DECLARACION SENTENCIA | DESARROLLO  SENTENCIA;

DECLARACION ::= NOMBRE:nombre ASIGNACION DIGITO:valor P_COMA
   {:
    Utilidades.addVarible(nombre.toString(), valor.toString());
   :}| NOMBRE:nombre  ASIGNACION NOMBRE:nombre_a P_COMA {:
    Utilidades.addVarible(nombre.toString(), nombre_a.toString());
   :}|NOMBRE:nombre ASIGNACION OPERACIONP:operador P_COMA {:
    Utilidades.addVarible(nombre.toString(), operador.toString());
   :}|PRESAS:operador ASIGNACION NOMBRE:nombre P_COMA {:
    Utilidades.addVarible(operador.toString(), nombre.toString());
   :}|DEPREDADORES:operador ASIGNACION NOMBRE:nombre P_COMA {:
    Utilidades.addVarible(operador.toString(), nombre.toString());
   :}| NOMBRE:nombre ASIGNACION OPERACIOND:operador P_COMA{:
    Utilidades.addVarible(nombre.toString(), operador.toString());
   :}| TCP:nombre ASIGNACION  DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}| TCD:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}| ECDP:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}| ECAD:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :};
VALOR ::= DIGITO:dig {:
//if (!variables.contains(Double.parseDouble(dig.toString()))) {

a = Double.parseDouble(dig.toString());
variables.add(a);
//}else{
//System.out.println("No se puede agregar ma valores ");
//}
:}| NOMBRE:nombre {:
if (!variablesNombre.contains(nombre.toString())) {
palabras = nombre.toString();
variablesNombre.add(palabras);
}
:};
DESARROLLO ::= PRESAS ASIGNACION OPERACIONP P_COMA DEPREDADORES ASIGNACION OPERACIOND P_COMA{:
Utilidades.OperacionLotkaVolterra(variables);
:};

// Dx = a1 * 5 - 12*8*9; PRINT Dx AND Dy;
OPERACIONP ::= TCP MULTIPLICACION VALOR RESTA ECDP MULTIPLICACION  VALOR RESTA VALOR|
TCP:valor_a MULTIPLICACION VALOR:valor_presa RESTA PARENTESIS_A ECDP:valor_c MULTIPLICACION VALOR:valor_d MULTIPLICACION VALOR:valor_depredador PARENTESIS_C {:

:}|
              PARENTESIS_A TCP MULTIPLICACION VALOR PARENTESIS_C RESTA  ECDP MULTIPLICACION VALOR MULTIPLICACION VALOR |
              PARENTESIS_A TCP MULTIPLICACION VALOR PARENTESIS_C RESTA PARENTESIS_A ECDP MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C;

OPERACIOND::= ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR  RESTA  TCD MULTIPLICACION VALOR |
              PARENTESIS_A ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C RESTA  TCD MULTIPLICACION VALOR{:

              :}  |
              PARENTESIS_A ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR PARENTESIS_C RESTA PARENTESIS_A TCD MULTIPLICACION VALOR PARENTESIS_C |
              ECAD MULTIPLICACION VALOR MULTIPLICACION VALOR  RESTA PARENTESIS_A TCD MULTIPLICACION VALOR PARENTESIS_C;

RESULTADO::=  P_RESERVADA PRESAS:presa CONCATENADOR DEPREDADORES:depredador P_COMA {:
System.out.println("Ingreso" + presa);
System.out.println("Ingresos" + depredador);
:};
