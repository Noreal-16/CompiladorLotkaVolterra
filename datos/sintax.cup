package AnalizadorSintactico;
import java_cup.runtime.Symbol;
import Sintactico.Utilidades;
import java.util.ArrayList;
import java.util.List;
import Sintactico.Variable;

parser code
{:
    private Symbol s;
    public void syntax_error(Symbol s){
        this.s = s;
    }
    public Symbol getS(){
        return this.s;
    }
:};
action code
{:
    public Integer tiempo;
    public String palabras;
    public  List<Double> variables =  new ArrayList<>();
    public  List<String> variablesNombre =  new ArrayList<>();
:}

terminal ASIGNACION, PARENTESIS_A, PARENTESIS_C,TIEMPO,DEPREDADORES,PRESAS, MULTIPLICACION,RESTA, CONCATENADOR, P_COMA, NOMBRE, DIGITO, ERROR, P_RESERVADA, DERIVADA,TCD,TCP,ECDP,ECAD,PRESA,DEPREDADOR;
non terminal INICIO, SENTENCIA, DECLARACION,RESULTADO, DECLARACION_TIEMPO,OPERACIO_ECUACIONES,DESARROLLO_DIGITO,DESARROLLO_VARIABLE, DESARROLLO_PARENTESIS2,OPERACIONP_DIGITO, OPERACIOND_DIGITO, VALOR,AUXOPERACION,PARENTESIS,OPERACIONP_VARIABLE,OPERACIOND_VARIABLE;
INICIO ::= SENTENCIA;
SENTENCIA ::= DECLARACION |OPERACIO_ECUACIONES RESULTADO |SENTENCIA DECLARACION  | SENTENCIA OPERACIO_ECUACIONES RESULTADO  ;

DECLARACION ::= TCP:nombre ASIGNACION  DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}| TCD:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}| ECDP:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}| ECAD:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
   :}|PRESA:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
    :}|DEPREDADOR:nombre ASIGNACION DIGITO:dig P_COMA{:
    Utilidades.addVarible(nombre.toString(), dig.toString());
    :} |TIEMPO:tiempo ASIGNACION  DIGITO:dig P_COMA {:
    Utilidades.addVarible(tiempo.toString(), dig.toString());
    :};



OPERACIO_ECUACIONES::= DESARROLLO_DIGITO | DESARROLLO_VARIABLE;

//Desarrollo de operaciones con Iconos
DESARROLLO_DIGITO::= TIEMPO:valor_t  PRESAS ASIGNACION OPERACIONP_DIGITO P_COMA DEPREDADORES ASIGNACION OPERACIOND_DIGITO  P_COMA{:
Utilidades.OperacionLotkaVolterra(variables,valor_t.toString());
:};
// Dx = a1 * 5 - 12*8*9; PRINT Dx AND Dy;
OPERACIONP_DIGITO::= DIGITO:valor_a MULTIPLICACION DIGITO:valor_b RESTA DIGITO:valor_c MULTIPLICACION  DIGITO:valor_d MULTIPLICACION DIGITO:valor_e {:
variables.add(Double.parseDouble(valor_a.toString()));
variables.add(Double.parseDouble(valor_b.toString()));
variables.add(Double.parseDouble(valor_c.toString()));
variables.add(Double.parseDouble(valor_d.toString()));
variables.add(Double.parseDouble(valor_e.toString()));
:}|
                DIGITO:valor_a MULTIPLICACION DIGITO:valor_b RESTA PARENTESIS_A DIGITO:valor_c MULTIPLICACION DIGITO:valor_d MULTIPLICACION DIGITO:valor_e PARENTESIS_C {:
                variables.add(Double.parseDouble(valor_a.toString()));
                variables.add(Double.parseDouble(valor_b.toString()));
                variables.add(Double.parseDouble(valor_c.toString()));
                variables.add(Double.parseDouble(valor_d.toString()));
                variables.add(Double.parseDouble(valor_e.toString()));
                :}|
                PARENTESIS_A DIGITO:valor_a MULTIPLICACION DIGITO:valor_b PARENTESIS_C RESTA  DIGITO:valor_c MULTIPLICACION DIGITO:valor_d MULTIPLICACION DIGITO:valor_e {:
                variables.add(Double.parseDouble(valor_a.toString()));
                variables.add(Double.parseDouble(valor_b.toString()));
                variables.add(Double.parseDouble(valor_c.toString()));
                variables.add(Double.parseDouble(valor_d.toString()));
                variables.add(Double.parseDouble(valor_e.toString()));
                :}|
                PARENTESIS_A DIGITO:valor_a MULTIPLICACION DIGITO:valor_b PARENTESIS_C RESTA PARENTESIS_A DIGITO:valor_c MULTIPLICACION DIGITO:valor_d MULTIPLICACION DIGITO:valor_e PARENTESIS_C {:
                variables.add(Double.parseDouble(valor_a.toString()));
                variables.add(Double.parseDouble(valor_b.toString()));
                variables.add(Double.parseDouble(valor_c.toString()));
                variables.add(Double.parseDouble(valor_d.toString()));
                variables.add(Double.parseDouble(valor_e.toString()));
                :};

OPERACIOND_DIGITO::= DIGITO:valor_1 MULTIPLICACION DIGITO:valor_2 MULTIPLICACION DIGITO:valor_3  RESTA  DIGITO:valor_4 MULTIPLICACION DIGITO:valor_5 {:
variables.add(Double.parseDouble(valor_1.toString()));
variables.add(Double.parseDouble(valor_2.toString()));
variables.add(Double.parseDouble(valor_3.toString()));
variables.add(Double.parseDouble(valor_4.toString()));
variables.add(Double.parseDouble(valor_5.toString()));
:} |
                PARENTESIS_A DIGITO:valor_1 MULTIPLICACION DIGITO:valor_2 MULTIPLICACION DIGITO:valor_3 PARENTESIS_C RESTA  DIGITO:valor_4 MULTIPLICACION DIGITO:valor_5 {:
                variables.add(Double.parseDouble(valor_1.toString()));
                variables.add(Double.parseDouble(valor_2.toString()));
                variables.add(Double.parseDouble(valor_3.toString()));
                variables.add(Double.parseDouble(valor_4.toString()));
                variables.add(Double.parseDouble(valor_5.toString()));
                :}|
                PARENTESIS_A DIGITO:valor_1 MULTIPLICACION DIGITO:valor_2 MULTIPLICACION DIGITO:valor_3 PARENTESIS_C RESTA PARENTESIS_A DIGITO:valor_4 MULTIPLICACION DIGITO:valor_5 PARENTESIS_C {:
                variables.add(Double.parseDouble(valor_1.toString()));
                variables.add(Double.parseDouble(valor_2.toString()));
                variables.add(Double.parseDouble(valor_3.toString()));
                variables.add(Double.parseDouble(valor_4.toString()));
                variables.add(Double.parseDouble(valor_5.toString()));
                :}|
                DIGITO:valor_1 MULTIPLICACION DIGITO:valor_2 MULTIPLICACION DIGITO:valor_3  RESTA PARENTESIS_A DIGITO:valor_4 MULTIPLICACION DIGITO:valor_5 PARENTESIS_C {:
                variables.add(Double.parseDouble(valor_1.toString()));
                variables.add(Double.parseDouble(valor_2.toString()));
                variables.add(Double.parseDouble(valor_3.toString()));
                variables.add(Double.parseDouble(valor_4.toString()));
                variables.add(Double.parseDouble(valor_5.toString()));
                :};

//Desarrollo de operaciones con Variables
DESARROLLO_VARIABLE::= TIEMPO:valor_t PRESAS ASIGNACION OPERACIONP_VARIABLE  P_COMA DEPREDADORES ASIGNACION OPERACIOND_VARIABLE  P_COMA {:
Utilidades.operarVariables(variablesNombre, valor_t.toString());
:};

OPERACIONP_VARIABLE::= TCP:valor_a MULTIPLICACION PRESA:valor_b RESTA ECDP:valor_c MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR:valor_d {:
variablesNombre.add(valor_a.toString());
variablesNombre.add(valor_b.toString());
variablesNombre.add(valor_c.toString());
variablesNombre.add(valor_d.toString());
:}|
                TCP:valor_a MULTIPLICACION PRESA:valor_b RESTA PARENTESIS_A ECDP:valor_c MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR:valor_d PARENTESIS_C {:
                variablesNombre.add(valor_a.toString());
                variablesNombre.add(valor_b.toString());
                variablesNombre.add(valor_c.toString());
                variablesNombre.add(valor_d.toString());
                :}|
                PARENTESIS_A TCP:valor_a MULTIPLICACION PRESA:valor_b PARENTESIS_C RESTA ECDP:valor_c MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR:valor_d {:
                variablesNombre.add(valor_a.toString());
                variablesNombre.add(valor_b.toString());
                variablesNombre.add(valor_c.toString());
                variablesNombre.add(valor_d.toString());
                :}|
                PARENTESIS_A TCP:valor_a MULTIPLICACION PRESA:valor_b PARENTESIS_C RESTA PARENTESIS_A ECDP:valor_c MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR:valor_d PARENTESIS_C {:
                variablesNombre.add(valor_a.toString());
                variablesNombre.add(valor_b.toString());
                variablesNombre.add(valor_c.toString());
                variablesNombre.add(valor_d.toString());
                :};


OPERACIOND_VARIABLE::= ECAD:valor_1 MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR RESTA TCD:valor_2 MULTIPLICACION DEPREDADOR {:
variablesNombre.add(valor_1.toString());
variablesNombre.add(valor_2.toString());
:}|

                PARENTESIS_A ECAD:valor_1 MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C RESTA  TCD:valor_2 MULTIPLICACION DEPREDADOR {:
                variablesNombre.add(valor_1.toString());
                variablesNombre.add(valor_2.toString());
                :}|
                PARENTESIS_A ECAD:valor_1 MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR PARENTESIS_C RESTA PARENTESIS_A TCD:valor_2 MULTIPLICACION DEPREDADOR PARENTESIS_C {:
                variablesNombre.add(valor_1.toString());
                variablesNombre.add(valor_2.toString());
                :}|
                ECAD:valor_1 MULTIPLICACION PRESA MULTIPLICACION DEPREDADOR  RESTA PARENTESIS_A TCD:valor_2 MULTIPLICACION DEPREDADOR PARENTESIS_C {:
                variablesNombre.add(valor_1.toString());
                variablesNombre.add(valor_2.toString());
                :};

RESULTADO::=  P_RESERVADA PRESAS:presa CONCATENADOR DEPREDADORES:depredador P_COMA {:
Utilidades.imprimirLotkaVolterra(presa.toString(), depredador.toString());
:};
